#define_operand_type 4[esp] = MEM
#define_operand_type -16 = CONST
#define_operand_type DWORD PTR -4[ecx] = MEM
#define_operand_type 1292 = CONST
#define_operand_type __x86.get_pc_thunk.ax = MEM
#define_operand_type OFFSET FLAT:_GLOBAL_OFFSET_TABLE_ = CONST
#define_operand_type -152[ebp] = MEM
#define_operand_type .LC0@GOTOFF[eax] = MEM
#define_operand_type 32 = MEM
#define_operand_type movsd = MEM
#define_operand_type 12 = CONST
#define_operand_type iv.10091@GOTOFF[eax] = MEM
#define_operand_type key.10090@GOTOFF[eax] = MEM
#define_operand_type 128 = CONST
#define_operand_type decrypt = MEM
#define_operand_type 0 = CONST
#define_operand_type -12[ebp] = MEM
#define_operand_type -4[ecx] = MEM


        lea     ecx, 4[esp]
        and     esp, -16
        push    DWORD PTR -4[ecx]
        push    ebp
        mov     ebp, esp
        push    edi
        push    esi
        push    ecx
        sub     esp, 1292
        call    __x86.get_pc_thunk.ax
        add     eax, OFFSET FLAT:_GLOBAL_OFFSET_TABLE_
        lea     edi, -152[ebp]
        lea     esi, .LC0@GOTOFF[eax]
        mov     ecx, 32
        rep     movsd
        mov     esi, esp
        sub     esp, 12
        push    esi
        lea     edx, iv.10091@GOTOFF[eax]
        push    edx
        lea     eax, key.10090@GOTOFF[eax]
        push    eax
        push    128
        lea     eax, -152[ebp]
        push    eax
        call    decrypt
        add     esp, 32
        call    esi
        mov     eax, 0
        lea     esp, -12[ebp]
        pop     ecx
        pop     esi
        pop     edi
        pop     ebp
        lea     esp, -4[ecx]
        ret