#define_operand_type 28 = CONST
#define_operand_type __x86.get_pc_thunk.bx = MEM
#define_operand_type OFFSET_FLAT:_GLOBAL_OFFSET_TABLE_ = CONST
#define_operand_type DWORD PTR 64[esp] = MEM
#define_operand_type EVP_CIPHER_CTX_new@PLT = MEM
#define_operand_type .L9 = MEM
#define_operand_type EVP_aes_256_cbc@PLT = MEM
#define_operand_type .L10 = MEM
#define_operand_type 12 = CONST
#define_operand_type DWORD PTR 72[esp] = MEM
#define_operand_type 0 = CONST
#define_operand_type EVP_DecryptInit_ex@PLT = MEM
#define_operand_type 32 = CONST
#define_operand_type 1 = CONST
#define_operand_type 32[esp] = MEM
#define_operand_type EVP_DecryptUpdate@PLT = MEM
#define_operand_type .L11 = MEM
#define_operand_type DWORD PTR 12[esp] = MEM
#define_operand_type 4 = CONST
#define_operand_type 16[esp] = MEM
#define_operand_type EVP_DecryptFinal_ex@PLT = MEM
#define_operand_type 16 = CONST
#define_operand_type .L12 = MEM
#define_operand_type EVP_CIPHER_CTX_free@PLT = MEM
#define_operand_type 44 = CONST


        push    ebp
        push    edi
        push    esi
        push    ebx
        sub     esp, 28
        call    __x86.get_pc_thunk.bx
        add     ebx, OFFSET_FLAT:_GLOBAL_OFFSET_TABLE_
        mov     edi, DWORD PTR 64[esp]
        call    EVP_CIPHER_CTX_new@PLT
        test    eax, eax
        je      .L9
        mov     esi, eax
        call    EVP_aes_256_cbc@PLT
        sub     esp, 12
        push    DWORD PTR 72[esp]
        push    DWORD PTR 72[esp]
        push    0
        push    eax
        push    esi
        call    EVP_DecryptInit_ex@PLT
        add     esp, 32
        cmp     eax, 1
        jne     .L10
        sub     esp, 12
        push    DWORD PTR 64[esp]
        push    DWORD PTR 64[esp]
        lea     eax, 32[esp]
        push    eax
        push    edi
        push    esi
        call    EVP_DecryptUpdate@PLT
        add     esp, 32
        cmp     eax, 1
        jne     .L11
        mov     ebp, DWORD PTR 12[esp]
        sub     esp, 4
        lea     eax, 16[esp]
        push    eax
        add     edi, ebp
        push    edi
        push    esi
        call    EVP_DecryptFinal_ex@PLT
        add     esp, 16
        cmp     eax, 1
        jne     .L12
        add     ebp, DWORD PTR 12[esp]
        sub     esp, 12
        push    esi
        call    EVP_CIPHER_CTX_free@PLT
        mov     eax, ebp
        add     esp, 44
        pop     ebx
        pop     esi
        pop     edi
        pop     ebp
        ret